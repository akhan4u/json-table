.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "JT" "1" "June 2017" "" "JT MANUAL"
.
.SH "NAME"
\fBjt\fR \- transform JSON data to tabular format
.
.SH "SYNOPSIS"
\fBjt\fR \fB[\-hV]\fR
.
.br
\fBjt\fR \fB\-u\fR \fIstring\fR
.
.br
\fBjt\fR [\fB\-aj\fR] [\fBCOMMAND\fR \.\.\.]
.
.SH "DESCRIPTION"
\fBJt\fR extracts information from UTF\-8 encoded JSON forms read from \fIstdin\fR and writes the results as tab\-delimited, newline\-separated records to \fIstdout\fR for processing with common Unix text processing utilities in shell pipelines\.
.
.SH "OPTIONS"
.
.TP
\fB\-h\fR
Print usage info and exit\.
.
.TP
\fB\-V\fR
Print version and license info and exit\.
.
.TP
\fB\-a\fR
Explicit iteration mode: require the \fB\.\fR command to iterate over arrays instead of iterating automatically\.
.
.TP
\fB\-j\fR
Inner join mode: discard rows with missing columns\.
.
.TP
\fB\-s\fR
Included for compatibility with earlier versions\.
.
.TP
\fB\-u\fR \fIstring\fR
Unescape JSON \fIstring\fR, print it, and exit\.
.
.SH "OPERATION"
Non\-option arguments are words (commands) in a stack\-based programming language\. Commands operate on the stacks provided by the \fBjt\fR runtime:
.
.IP "\(bu" 4
The \fBdata stack\fR contains JSON values commands will operate on\.
.
.IP "\(bu" 4
The \fBgosub stack\fR contains pointers into the data stack to save and restore state\.
.
.IP "\(bu" 4
The \fBindex stack\fR contains pointers to current iterators during iteration\.
.
.IP "\(bu" 4
The \fBloop stack\fR contains pointers to current iterators between iterations\.
.
.IP "\(bu" 4
The \fBoutput stack\fR contains values to be printed after each iteration\.
.
.IP "" 0
.
.P
When \fBjt\fR starts, the following happens:
.
.IP "1." 4
One JSON form is read from \fIstdin\fR, parsed, and pushed onto the data stack\.
.
.IP "2." 4
If the top of the data stack is a JSON array the next item in the array is pushed onto the data stack based on state previously saved on the loop stack\. The loop stack is then popped and pushed onto the index stack\.
.
.IP "3." 4
The next command is executed\.
.
.IP "4." 4
Steps 2 and 3 are repeated until no commands are left to execute\.
.
.IP "5." 4
Values in the output stack are printed, separated by tabs and followed by a newline (see \fBOUTPUT FORMAT\fR below)\. Data, output, and gosub stacks are reset to their states as they were after step 1\.
.
.IP "6." 4
Loop variables are popped off of the index stack\. They are then incremented and pushed onto the loop stack as necessary\.
.
.IP "7." 4
Steps 2 through 6 are repeated until the loop stack is empty (i\.e\. there are no more iterations left)\.
.
.IP "" 0
.
.P
This process is repeated until there is no more JSON to read\.
.
.SH "COMMANDS"
\fBJt\fR provides the following commands:
.
.TP
\fB[\fR
Save the state of the data stack: the current data stack pointer is pushed onto the gosub stack\.
.
.TP
\fB]\fR
Restore the data stack to a saved state: pop the gosub stack and restore the data stack pointer to that state\.
.
.TP
\fB%\fR
Push the value at the top of the data stack onto the output stack\.
.
.TP
\fB^\fR
Push the value at the top of the index stack onto the output stack\. Note that the index stack will always have at least one item: the index of the last JSON object read from stdin\.
.
.TP
\fB@\fR
Print the keys of the object at the top of the data stack and exit\.
.
.IP
If the value at the top of the data stack is an array the first item in the array is pushed onto the data stack and the command is reevaluated\.
.
.IP
If the value at the top of the data stack is not an object or an array then its type is printed in brackets, eg\. \fI[array]\fR, \fI[string]\fR, \fI[number]\fR, \fI[boolean]\fR, or \fI[null]\fR\. If there is no value then \fI[none]\fR is printed\.
.
.TP
\fB+\fR
Parse embedded JSON: if the item at the top of the data stack is a string, parse it and push the result onto the data stack\.
.
.IP
If the item at the top of the data stack is not a string or if there is an error parsing the JSON then nothing is done (the operation is a no\-op)\.
.
.TP
\fB\.\fR
Iterate over the values of the object at the top of the data stack\. The current value will be pushed onto the data stack and the current key will be pushed onto the index stack\.
.
.TP
\fB[\fR\fIKEY\fR\fB]\fR
Drill down: get the value of the \fIKEY\fR property of the object at the top of the data stack and push that value onto the data stack\.
.
.IP
If the item at the top of the data stack is not an object or if the object has no \fIKEY\fR property a blank field is printed, unless the \fB\-j\fR option was specified in which case the entire row is removed from the output\.
.
.IP
If the \fIKEY\fR property of the object is an array subsequent commands will operate on one of the items in the array, chosen automatically by \fBjt\fR\. The array index will be available to subsequent commands via the index stack\.
.
.TP
\fIKEY\fR
See \fB[\fR\fIKEY\fR\fB]\fR above \(em the \fB[\fR and \fB]\fR may be omitted if the property name \fIKEY\fR does not conflict with any \fBjt\fR command\.
.
.SH "OUTPUT FORMAT"
The format of printed output from \fBjt\fR (see \fB%\fR in \fBCOMMANDS\fR, above) depends on the type of thing being printed:
.
.SS "Primitives"
JSON primitives (i\.e\. \fBnull\fR, \fBtrue\fR, and \fBfalse\fR) and numbers are printed verbatim\. \fBJt\fR does not process them in any way\. Numbers can be of arbitrary precision, as long as they conform to the JSON parsing grammar\.
.
.P
If special formatting is required the \fBprintf\fR program is your friend:
.
.IP "" 4
.
.nf

$ printf %\.0f 2\.99792458e9
2997924580
.
.fi
.
.IP "" 0
.
.SS "Strings"
Strings are printed verbatim, minus the enclosing double quotes\. No unescaping is performed because tabs or newlines in JSON strings would break the tabular output format\.
.
.P
If unescaped values are desired the \fB\-u\fR option can be used:
.
.IP "" 4
.
.nf

$ jt \-u \'i love music \eu266A\'
i love music â™ª
.
.fi
.
.IP "" 0
.
.SS "Collections"
Objects and arrays are printed as JSON with whitespace removed\.
.
.SH "EXAMPLES"
Below are a number of examples demonstrating how to use \fBjt\fR commands to do some simple exploration and extraction of data from JSON and JSON streams\.
.
.P
Remember the \fBbash\fR heredoc syntax with pipelines:
.
.IP "" 4
.
.nf

cat <<+++ |
foo
bar
+++
sed s/^/the/ | paste \-sd,
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

thefoo,thebar
.
.fi
.
.IP "" 0
.
.SS "Explore"
The \fB@\fR command prints information about the item at the top of the data stack\. When the item is an object \fB@\fR prints its keys:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": 100,
  "bar": 200,
  "baz": 300
}
+++
jt @
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

foo
bar
baz
.
.fi
.
.IP "" 0
.
.P
When the top item is an array \fB@\fR prints information about the first item in the array:
.
.IP "" 4
.
.nf

cat <<+++ |
[
  {
    "foo": 100,
    "bar": 200
  },
  {
    "baz": 300,
    "baf": 400
  }
]
+++
jt @
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

foo
bar
.
.fi
.
.IP "" 0
.
.P
Otherwise, \fB@\fR prints the type of the item:
.
.IP "" 4
.
.nf

cat <<+++ |
"hello world"
+++
jt @
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

[string]
.
.fi
.
.IP "" 0
.
.SS "Drill Down"
Property names are also commands\. Use \fBfoo\fR here as a command to drill down into the \fIfoo\fR property and then use \fB@\fR to print its keys:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": {
    "bar": 100,
    "baz": 200
  }
}
+++
jt foo @
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

bar
baz
.
.fi
.
.IP "" 0
.
.P
When a property name conflicts with a \fBjt\fR command you must wrap the property name with square brackets to drill down:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "@": {
    "bar": 100,
    "baz": 200
  }
}
+++
jt [@] @
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

bar
baz
.
.fi
.
.IP "" 0
.
.SS "Extract"
The \fB%\fR command prints the item at the top of the data stack\. Note that when the top item is a collection it is printed as JSON (insiginificant whitespace removed):
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": 100,
  "bar": 200
}
+++
jt %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

{"foo":100,"bar":200}
.
.fi
.
.IP "" 0
.
.P
Drill down and print:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": {
    "bar": 100
  }
}
+++
jt foo bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100
.
.fi
.
.IP "" 0
.
.P
The \fB%\fR command can be used multiple times\. The printed values will be delimited by tabs:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": {
    "bar": 100
  }
}
+++
jt % foo % bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

{"foo":{"bar":100}}     {"bar":100}     100
.
.fi
.
.IP "" 0
.
.SS "Save / Restore"
The \fB[\fR and \fB]\fR commands provide a sort of \fBGOSUB\fR facility \(em the data stack is saved by \fB[\fR and restored by \fB]\fR\. This can be used to extract values from different paths in the JSON as a single record:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": 100,
  "bar": 200
}
+++
jt [ foo % ] bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     200
.
.fi
.
.IP "" 0
.
.P
The \fB[\fR and \fB]\fR commands can be nested:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": {
    "bar": 100,
    "baz": 200
  },
  "baf": "quux"
}
+++
jt [ foo [ bar % ] [ baz % ] ] baf %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     200     quux
.
.fi
.
.IP "" 0
.
.SS "Iteration (Arrays)"
\fBJt\fR automatically iterates over arrays (unless this behavior is disabled \(em see \fBExplicit Iteration\fR below), producing one tab\-delimited record per iteration, records separated by newlines:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": 100,
  "bar": [
    {"baz": 200},
    {"baz": 300},
    {"baz": 400}
  ]
}
+++
jt [ foo % ] bar baz %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     200
100     300
100     400
.
.fi
.
.IP "" 0
.
.P
The \fB^\fR command includes the array index as a column in the result:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": 100,
  "bar": [
    {"baz": 200},
    {"baz": 300},
    {"baz": 400}
  ]
}
+++
jt [ foo % ] bar ^ baz %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     0       200
100     1       300
100     2       400
.
.fi
.
.IP "" 0
.
.P
Note that \fB^\fR is scoped \(em it prints the index of the innermost enclosing loop:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": [
    {"bar": [100, 200]},
    {"bar": [300, 400]}
  ]
}
+++
jt foo ^ bar ^ %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

0       0       100
0       1       200
1       0       300
1       1       400
.
.fi
.
.IP "" 0
.
.SS "Iteration (Objects)"
The \fB\.\fR command iterates over the values of an object:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": 100,
  "bar": 200,
  "baz": 300
}
+++
jt \. %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100
200
300
.
.fi
.
.IP "" 0
.
.P
When iterating over an object the \fB^\fR command prints the name of the current property:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": 100,
  "bar": {
    "baz": 200,
    "baf": 300,
    "qux": 400
  }
}
+++
jt [ foo % ] bar \. ^ %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     baz     200
100     baf     300
100     qux     400
.
.fi
.
.IP "" 0
.
.P
The scope of \fB^\fR is similar when iterating over objects:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": {
    "bar": 100,
    "baz": 200
  }
}
+++
jt \. ^ \. ^ %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

foo     bar     100
foo     baz     200
.
.fi
.
.IP "" 0
.
.SS "JSON Streams"
\fBJt\fR automatically iterates over entities in a JSON stream (optionally delimited by whitespace):
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo": 100, "bar": 200}
{"foo": 200, "bar": 300}
{"foo": 300, "bar": 400}
+++
jt [ foo % ] bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     200
200     300
300     400
.
.fi
.
.IP "" 0
.
.P
Whitespace is optional:
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo": 100,"bar": 200}{"foo":200,"bar":300}
{
  "foo": 300,
  "bar": 400
}
+++
jt [ foo % ] bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     200
200     300
300     400
.
.fi
.
.IP "" 0
.
.P
Within a JSON stream the \fB^\fR command prints the current stream index:
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo": 100, "bar": 200}
{"foo": 200, "bar": 300}
{"foo": 300, "bar": 400}
+++
jt ^ [ foo % ] bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

0       100     200
1       200     300
2       300     400
.
.fi
.
.IP "" 0
.
.P
Note that one entity in the stream may result in more than one output record when iteration is involved:
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo":10,"bar":[100,200]}
{"foo":20,"bar":[300,400]}
+++
jt [ foo % ] bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

10      100
10      200
20      300
20      400
.
.fi
.
.IP "" 0
.
.SS "Nested JSON"
The \fB+\fR command parses JSON embedded in strings:
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo":"{\e"bar\e":100}","baz":200}
{"foo":"{\e"bar\e":200}","baz":300}
{"foo":"{\e"bar\e":300}","baz":400}
+++
jt [ foo + bar % ] baz %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     200
200     300
300     400
.
.fi
.
.IP "" 0
.
.P
Note that \fB+\fR pushes the resulting JSON entity onto the data stack \(em it does not modify the original JSON:
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo":"{\e"bar\e":100}","baz":200}
{"foo":"{\e"bar\e":200}","baz":300}
{"foo":"{\e"bar\e":300}","baz":400}
+++
jt [ foo + bar % ] %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     {"foo":"{\e"bar\e":100}","baz":200}
200     {"foo":"{\e"bar\e":200}","baz":300}
300     {"foo":"{\e"bar\e":300}","baz":400}
.
.fi
.
.IP "" 0
.
.SS "Joins"
Notice the empty column \(em some objects don\'t have the \fIbar\fR key:
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo":100,"bar":1000}
{"foo":200}
{"foo":300,"bar":3000}
+++
jt [ foo % ] bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     1000
200
300     3000
.
.fi
.
.IP "" 0
.
.P
Enable inner join mode with the \fB\-j\fR flag\. This removes output rows when a key in the traversal path doesn\'t exist:
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo":100,"bar":1000}
{"foo":200}
{"foo":300,"bar":3000}
+++
jt \-j [ foo % ] bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     1000
300     3000
.
.fi
.
.IP "" 0
.
.P
Note that this does not remove rows when the key exists and the value is empty:
.
.IP "" 4
.
.nf

cat <<+++ |
{"foo":100,"bar":1000}
{"foo":200,"bar":""}
{"foo":300,"bar":3000}
+++
jt \-j [ foo % ] bar %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

100     1000
200
300     3000
.
.fi
.
.IP "" 0
.
.SS "Explicit Iteration"
Sometimes the implicit iteration over arrays is awkward:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
+++
jt \. ^ \. ^ %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

0       bar     100
1       bar     200
.
.fi
.
.IP "" 0
.
.P
Should the first \fB^\fR be printing the array index (which it does, in this case) or the object key (i\.e\. \fIfoo\fR)? Explicit iteration with the \fB\-a\fR flag eliminates the ambiguity:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
+++
jt \-a \. ^ \. ^ %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

foo     0       {"bar":100}
foo     1       {"bar":200}
.
.fi
.
.IP "" 0
.
.P
Notice that \fBjt\fR does not automatically iterate over the array: the first \fB\.\fR command iterates over the root object, and the second \fB\.\fR iterates explicitly over the array, so the final \fB%\fR prints the items in the array\.
.
.P
With explicit iteration enabled:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
+++
jt \-a \. \. ^ \. ^ %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

0       bar     100
1       bar     200
.
.fi
.
.IP "" 0
.
.P
the first \fB^\fR prints the array index and:
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
+++
jt \-a \. ^ \. \. ^ %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

foo     bar     100
foo     bar     200
.
.fi
.
.IP "" 0
.
.P
the first \fB^\fR prints the object key, and
.
.IP "" 4
.
.nf

cat <<+++ |
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
+++
jt \-a \. ^ \. ^ \. ^ %
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

foo     0       bar     100
foo     1       bar     200
.
.fi
.
.IP "" 0
.
.P
adding a third \fB^\fR command prints both\.
.
.SH "COPYRIGHT"
Copyright Â© 2017 Micha Niskin \fB<micha\.niskin@gmail\.com>\fR, distributed under the Eclipse Public License, version 1\.0\. This is free software: you are free to change and redistribute it\. There is NO WARRANTY, to the extent permitted by law\.
