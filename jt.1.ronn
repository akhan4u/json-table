jt(1) -- transform JSON data to tabular format
==============================================

## SYNOPSIS

`jt` [`-h`]<br>
`jt` [`-js`] [`-F` <char>] [`-R` <char>] [`-i` <file>] [`-o` <file>] `COMMAND` ...

## DESCRIPTION

**Jt** transforms JSON data structures into tables of columns and rows for
processing in the shell. Extracting information from deeply nested JSON data
is difficult and unreliable with tools like **sed** and **awk**, and tools
that are specially designed for manipulating JSON are cumbersome to use in
the shell because they either return their results as JSON or introduce a
new turing complete scripting language that needs to be quoted and constructed
via string interpolation.

**Jt** provides only what is needed to extract data from nested JSON data
structures and organize the data into a table. Tools like **cut**, **paste**,
**join**, **sort**, **uniq**, etc. can be used to efficiently reduce the
tabular data to produce the final result.

## OPTIONS

  * `-h`:
    Print usage info and exit.

  * `-j`:
    Inner join mode: discard rows with missing columns.

  * `-s`:
    Stream mode: expect one JSON object per line of input.

  * `-F` <char>:
    Set the output field separator to <char> (tab).

  * `-R` <char>:
    Set the output record separator to <char> (newline).

  * `-i` <file>:
    Read JSON input from <file> instead of from stdin.

  * `-o` <file>:
    Write output to <file> instead of to stdout.

## COMMANDS

Non-option arguments are `commands` in a limited stack language. These commands
operate on one of the following internal `jt` stack data structures:

* The `data stack` contains JSON objects from the input stream. Commands
  operate on the top of this stack to traverse the JSON tree and print values.

* The `gosub stack` contains pointers into the data stack. Commands push data
  stack pointers onto this stack to save the state of the data stack and pop
  them off to restore the data stack to a saved state.

* The `index stack` contains the indexes of nested arrays as `jt` iterates over
  them. Commands can print the value at the top of this stack.

The following commands are available:

  * `[`:
    Save the state of the data stack: the current data stack pointer is pushed
    onto the gosub stack.

  * `]`:
    Restore the data stack to a saved state: pop the gosub stack and restore
    the data stack pointer to that state.

  * `%`:
    Print the value at the top of the data stack. If the item at the top of the
    data stack is not a string or primitive type a blank field is printed.

  * `^`:
    Print the array index at the top of the index stack. It is an error if the
    index stack is empty.

  * `?`:
    Print the keys of the object at the top of the data stack. It is an error
    if the item at the top of the data stack is not an object.

  * <KEY>:
    Drill down: get the value of the <KEY> property of the object at the top
    of the data stack and push that value onto the data stack.

## EXAMPLES

Explore JSON data, print an object's keys:

    $ JSON='{"foo":"a","bar":{"x":"b"},"baz":[{"y":"c"},{"y":"d","z":"e"}]}'

    $ echo "$JSON" | jt ?
    foo
    bar
    baz

Print a nested object's keys:

    $ echo "$JSON" | jt bar ?
    x

Print the keys of the first object in a nested array:

    $ echo "$JSON" | jt baz ?
    y

Print the indexes in a nested array:

    $ echo "$JSON" | jt baz ^
    0
    1

Extract values from JSON data:

    $ echo "$JSON" | jt foo %
    a

Extract nested JSON data:

    $ echo "$JSON" | jt bar x %
    b

Extract multiple values by saving and restoring the data stack:

    $ echo "$JSON" | jt [ foo % ] bar x %
    a       b

Iterate over nested arrays, producing one row per iteration:

    $ echo "$JSON" | jt [ foo % ] [ bar x % ] baz y %
    a       b       c
    a       b       d

Include the array index as a column in the result:

    $ echo "$JSON" | jt [ foo % ] [ bar x % ] baz y ^ %
    a       b       0       c
    a       b       1       d

Notice the empty column &mdash; some objects don't have the <z> key:

    $ echo "$JSON" | jt [ foo % ] baz [ y % ] z %
    a       c
    a       d       e

Inner join mode will remove rows from the output when any key in the traversal
path doesn't exist:

    $ echo "$JSON" | jt -j [ foo % ] baz [ y % ] z %
    a       d       e

## COPYRIGHT

Copyright Â© 2016 Micha Niskin. Distributed under the Eclipse Public License,
version 1.0: https://www.eclipse.org/legal/epl-v10.html.

## SEE ALSO

jshon(1), jq(1), comm(1), diff(1), sort(1), join(1), uniq(1), bash(1)
