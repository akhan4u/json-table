jt(1) -- transform JSON data to tabular format
==============================================

## SYNOPSIS

`jt` `[-hV]`<br>
`jt` `-u` <string><br>
`jt` [`-aj`] [`COMMAND` ...]

## DESCRIPTION

**Jt** transforms JSON data structures into tables of columns and rows for
processing in the shell. Extracting information from deeply nested JSON data
is difficult and unreliable with tools like **sed** and **awk**, and tools
that are specially designed for manipulating JSON are cumbersome to use in
the shell because they either return their results as JSON or introduce a
new turing complete scripting language that needs to be quoted and constructed
via string interpolation.

**Jt** provides only what is needed to extract data from nested JSON data
structures and organize the data into a table. Tools like **cut**, **paste**,
**awk**, **join**, **sort**, **uniq**, etc. can be used to efficiently reduce
the tabular data to the final result.

**Jt** accepts JSON input (UTF-8) on <stdin> and writes output to <stdout>.
The input stream may contain multiple JSON forms separated by (optional)
whitespace (i.e. `SPACE`, `HT`, `CR`, or `LF`).

## OPTIONS

  * `-h`:
    Print usage info and exit.

  * `-V`:
    Print version and license info and exit.

  * `-a`:
    Explicit iteration mode: require the `.` command to iterate over arrays
    instead of iterating automatically.

  * `-j`:
    Inner join mode: discard rows with missing columns.

  * `-s`:
    Included for compatibility with earlier versions.

  * `-u` <string>:
    Unescape JSON <string>, print it, and exit.

## OPERATION

Non-option arguments are words (commands) in a stack-based programming language.
Commands operate on the stacks provided by the **jt** runtime:

  * The `data stack` contains JSON values commands will operate on.

  * The `gosub stack` contains pointers into the data stack to save and restore
    state.

  * The `index stack` contains pointers to current iterators during iteration.

  * The `loop stack` contains pointers to current iterators between iterations.

  * The `output stack` contains values to be printed after each iteration.

When **jt** starts, the following happens:

1. One JSON form is read from <stdin>, parsed, and pushed onto the data stack.

2. If the top of the data stack is a JSON array the next item in the array is
   pushed onto the data stack based on state previously saved on the loop stack.
   The loop stack is then popped and pushed onto the index stack.

3. The next command is executed.

4. Steps 2 and 3 are repeated until no commands are left to execute.

5. Values in the output stack are printed, separated by tabs and followed by a
   newline (see **OUTPUT FORMAT** below). Data, output, and gosub stacks are
   reset to their states as they were after step 1.

6. Loop variables are popped off of the index stack. They are then incremented
   and pushed onto the loop stack as necessary.

7. Steps 2 through 6 are repeated until the loop stack is empty (i.e. there are
   no more iterations left).

This process is repeated until there is no more JSON to read.

## COMMANDS

**Jt** provides the following commands:

  * `[`:
    Save the state of the data stack: the current data stack pointer is pushed
    onto the gosub stack.

  * `]`:
    Restore the data stack to a saved state: pop the gosub stack and restore
    the data stack pointer to that state.

  * `%`:
    Push the value at the top of the data stack onto the output stack.

  * `^`:
    Push the value at the top of the index stack onto the output stack. Note
    that the index stack will always have at least one item: the index of the
    last JSON object read from stdin.

  * `@`:
    Print the keys of the object at the top of the data stack and exit.

    If the value at the top of the data stack is an array the first item in the
    array is pushed onto the data stack and the command is reevaluated.

    If the value at the top of the data stack is not an object or an array then
    its type is printed in brackets, eg. <[array]>, <[string]>, <[number]>,
    <[boolean]>, or <[null]>. If there is no value then <[none]> is printed.

  * `+`:
    Parse embedded JSON: if the item at the top of the data stack is a string,
    parse it and push the result onto the data stack.

    If the item at the top of the data stack is not a string or if there is an
    error parsing the JSON then nothing is done (the operation is a no-op).

  * `.`:
    Iterate over the values of the object at the top of the data stack. The
    current value will be pushed onto the data stack and the current key will
    be pushed onto the index stack.

  * `[`<KEY>`]`:
    Drill down: get the value of the <KEY> property of the object at the top
    of the data stack and push that value onto the data stack.

    If the item at the top of the data stack is not an object or if the object
    has no <KEY> property a blank field is printed, unless the `-j` option was
    specified in which case the entire row is removed from the output.

    If the <KEY> property of the object is an array subsequent commands will
    operate on one of the items in the array, chosen automatically by `jt`.
    The array index will be available to subsequent commands via the index
    stack.

  * <KEY>:
    See `[`<KEY>`]` above &mdash; the `[` and `]` may be omitted if the
    property name <KEY> does not conflict with any `jt` command.

## OUTPUT FORMAT

The format of printed output from **jt** (see `%` in **COMMANDS**, above)
depends on the type of thing being printed:

### Primitives

JSON primitives (i.e. `null`, `true`, and `false`) and numbers are printed
verbatim. **Jt** does not process them in any way. Numbers can be of arbitrary
precision, as long as they conform to the JSON parsing grammar.

If special formatting is required the `printf` program is your friend:

    $ printf %.0f 2.99792458e9
    2997924580

### Strings

Strings are printed verbatim, minus the enclosing double quotes. No unescaping
is performed because tabs or newlines in JSON strings would break the tabular
output format.

If unescaped values are desired the `-u` option can be used:

    $ jt -u 'i love music \u266A'
    i love music â™ª

### Collections

Objects and arrays are printed as JSON with whitespace removed.

## EXAMPLES

Below are a number of examples demonstrating how to use **jt** commands to do
some simple exploration and extraction of data from JSON and JSON streams.

### Explore

The `@` command prints information about the item at the top of the data stack.
When the item is an object `@` prints its keys:

```bash
cat <<EOT | jt @
{
  "foo": 100,
  "bar": 200,
  "baz": 300
}
EOT
```
```
foo
bar
baz
```

When the top item is an array `@` prints information about the first item in
the array:

```bash
cat <<EOT | jt @
[{"foo":100,"bar":200,"baz":300}]
EOT
```
```
foo
bar
baz
```

Otherwise, `@` prints the type of the item:

```bash
cat <<EOT | jt @
"hello world"
EOT
```
```
[string]
```

### Drill Down

Property names are also commands. Use `foo` here as a command to drill down
into the `foo` property and then use `@` to print its keys:

```bash
cat <<EOT | jt foo @
{
  "foo": {
    "bar": 100,
    "baz": 200
  }
}
EOT
```
```
bar
baz
```

When a property name conflicts with a **jt** command you must wrap the property
name with square brackets to drill down:

```bash
cat <<EOT | jt [@] @
{
  "@": {
    "bar": 100,
    "baz": 200
  }
}
EOT
```
```
bar
baz
```

### Extract

The `%` command prints the item at the top of the data stack. Note that when
the top item is a collection it is printed as JSON (insiginificant whitespace
removed):

```bash
cat <<EOT | jt %
{
  "foo": 100,
  "bar": 200
}
EOT
```
```
{"foo":100,"bar":200}
```

Drill down and print:

```bash
cat <<EOT | jt foo bar %
{
  "foo": {
    "bar": 100
  }
}
EOT
```
```
100
```

The `%` command can be used multiple times. The printed values will be delimited
by tabs:

```bash
cat <<EOT | jt % foo % bar %
{
  "foo": {
    "bar": 100
  }
}
EOT
```
```
{"foo":{"bar":100}}     {"bar":100}     100
```

### Save / Restore

The `[` and `]` commands provide a sort of `GOSUB` facility &mdash; the data
stack is saved by `[` and restored by `]`. This can be used to extract values
from different paths in the JSON as a single record:

```bash
cat <<EOT | jt [ foo % ] [ bar % ]
{
  "foo": 100,
  "bar": 200
}
EOT
```
```
100     200
```

### Iteration (Arrays)

**Jt** automatically iterates over arrays, running the program once for each
item in the array. This produces one tab-delimited record for each iteration,
separated by newlines:

```bash
cat <<EOT | jt [ foo % ] [ bar baz % ]
{
  "foo": 100,
  "bar": [
    {"baz": 200},
    {"baz": 300},
    {"baz": 400}
  ]
}
EOT
```
```
100     200
100     300
100     400
```

The `^` command includes the array index as a column in the result:

```bash
cat <<EOT | jt [ foo % ] [ bar ^ baz % ]
{
  "foo": 100,
  "bar": [
    {"baz": 200},
    {"baz": 300},
    {"baz": 400}
  ]
}
EOT
```
```
100     0       200
100     1       300
100     2       400
```

Note that `^` is scoped &mdash; it prints the index of the innermost enclosing
loop:

```bash
cat <<EOT | jt foo ^ bar ^ %
{
  "foo": [
    {"bar": [100, 200]},
    {"bar": [300, 400]}
  ]
}
EOT
```
```
0       0       100
0       1       200
1       0       300
1       1       400
```

### Iteration (Objects)

The `.` command iterates over the values of an object:

```bash
cat <<EOT | jt . %
{
  "foo": 100,
  "bar": 200,
  "baz": 300
}
EOT
```
```
100
200
300
```

When iterating over an object the `^` command prints the name of the current
property:

```bash
cat <<EOT | jt [ foo % ] [ bar . ^ % ]
{
  "foo": 100,
  "bar": {
    "baz": 200,
    "baf": 300,
    "qux": 400
  }
}
EOT
```
```
100     baz     200
100     baf     300
100     qux     400
```

The scope of `^` is similar when iterating over objects:

```bash
cat <<EOT | jt . ^ . ^ %
{
  "foo": {
    "bar": 100,
    "baz": 200
  }
}
EOT
```
```
foo     bar     100
foo     baz     200
```

### JSON Streams

**Jt** automatically iterates over all entities in a stream of JSON entities
delimited by optional whitespace:

```bash
cat <<EOT | jt [ foo % ] [ bar % ]
{"foo": 100, "bar": 200}
{"foo": 200, "bar": 300}
{"foo": 300, "bar": 400}
EOT
```
```
100     200
200     300
300     400
```

Whitespace is ignored:

```bash
cat <<EOT | jt [ foo % ] [ bar % ]
{"foo": 100,"bar": 200}{"foo":200,"bar":300}{
  "foo": 300,
  "bar": 400
}
EOT
```
```
100     200
200     300
300     400
```

Within a JSON stream the `^` command prints the current stream index:

```bash
cat <<EOT | jt ^ [ foo % ] [ bar % ]
{"foo": 100, "bar": 200}
{"foo": 200, "bar": 300}
{"foo": 300, "bar": 400}
EOT
```
```
0       100     200
1       200     300
2       300     400
```

Note that one entity in the stream may result in more than one output record
when iteration is involved:

```bash
cat <<EOT | jt [ foo % ] [ bar % ]
{"foo":10,"bar":[100,200]}
{"foo":20,"bar":[300,400]}
EOT
```
```
10      100
10      200
20      300
20      400
```

### Nested JSON

The `+` command parses JSON embedded in strings:

```bash
cat <<EOT | jt [ foo + bar % ] [ baz % ]
{"foo":"{\"bar\":100}","baz":200}
{"foo":"{\"bar\":200}","baz":300}
{"foo":"{\"bar\":300}","baz":400}
EOT
```
```
100     200
200     300
300     400
```

Note that `+` pushes the resulting JSON entity onto the data stack &mdash; it
does not modify the original JSON:

```bash
cat <<EOT | jt [ foo + bar % ] %
{"foo":"{\"bar\":100}","baz":200}
{"foo":"{\"bar\":200}","baz":300}
{"foo":"{\"bar\":300}","baz":400}
EOT
```
```
100     {"foo":"{\"bar\":100}","baz":200}
200     {"foo":"{\"bar\":200}","baz":300}
300     {"foo":"{\"bar\":300}","baz":400}
```

### Joins

Notice the empty column &mdash; some objects don't have the <bar> key:

```bash
cat <<EOT | jt [ foo % ] [ bar % ]
{"foo":100,"bar":1000}
{"foo":200}
{"foo":300,"bar":3000}
EOT
```
```
100     1000
200
300     3000
```

Enable inner join mode with the `-j` flag. This removes output rows when a key
in the traversal path doesn't exist:

```bash
cat <<EOT | jt -j [ foo % ] [ bar % ]
{"foo":100,"bar":1000}
{"foo":200}
{"foo":300,"bar":3000}
EOT
```
```
100     1000
300     3000
```

Note that this does not remove rows when the key exists and the value is empty:

```bash
cat <<EOT | jt -j [ foo % ] [ bar % ]
{"foo":100,"bar":1000}
{"foo":200,"bar":""}
{"foo":300,"bar":3000}
EOT
```
```
100     1000
200
300     3000
```

### Explicit Iteration

Sometimes the implicit iteration over arrays is awkward:

```bash
cat <<EOT | jt . ^ . ^ %
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
EOT
```
```
0       bar     100
1       bar     200
```

Should the first `^` be printing the array index (which it does, in this case)
or the object key (i.e. <foo>)? Explicit iteration with the `-a` flag eliminates
the ambiguity:

```bash
cat <<EOT | jt -a . . ^ . ^ %
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
EOT
```
```
0       bar     100
1       bar     200
```

prints the array index and:

```bash
cat <<EOT | jt -a . ^ . . ^ %
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
EOT
```
```
foo     bar     100
foo     bar     200
```

prints the object key, and

```bash
cat <<EOT | jt -a . ^ . ^ . ^ %
{
  "foo": [
    {"bar":100},
    {"bar":200}
  ]
}
EOT
```
```
foo     0       bar     100
foo     1       bar     200
```

prints both.

## COPYRIGHT

Copyright Â© 2017 Micha Niskin `<micha.niskin@gmail.com>`, distributed under
the Eclipse Public License, version 1.0. This is free software: you are free
to change and redistribute it. There is NO WARRANTY, to the extent permitted
by law.
