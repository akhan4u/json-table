jt(1) -- transform JSON data to tabular format
==============================================

## SYNOPSIS

`jt` `-h`<br>
`jt` `-u` <string><br>
`jt` `-c` [`-js`] [`-i` <file>] [`-o` <file>] `COMMAND` ...<br>
`jt` [`-js`] [`-F` <char>] [`-R` <char>] [`-i` <file>] [`-o` <file>] `COMMAND` ...

## DESCRIPTION

**Jt** transforms JSON data structures into tables of columns and rows for
processing in the shell. Extracting information from deeply nested JSON data
is difficult and unreliable with tools like **sed** and **awk**, and tools
that are specially designed for manipulating JSON are cumbersome to use in
the shell because they either return their results as JSON or introduce a
new turing complete scripting language that needs to be quoted and constructed
via string interpolation.

**Jt** provides only what is needed to extract data from nested JSON data
structures and organize the data into a table. Tools like **cut**, **paste**,
**awk**, **join**, **sort**, **uniq**, etc. can be used to efficiently reduce
the tabular data to the final result. Alternatively, **jt** can print output
in CSV format for processing in a spreadsheet or with command line tools like
`csvtool`.

## OPTIONS

  * `-h`:
    Print usage info and exit.

  * `-c`:
    Print output as CSV with JSON strings unescaped.

  * `-j`:
    Inner join mode: discard rows with missing columns.

  * `-s`:
    Stream mode: expect one JSON object per line of input.

  * `-u` <string>:
    Print unescaped UTF-8 JSON <string> and exit.

  * `-F` <char>:
    Set the output field separator to <char> (tab).

  * `-R` <char>:
    Set the output record separator to <char> (newline).

  * `-i` <file>:
    Read JSON input from <file> instead of from stdin.

  * `-o` <file>:
    Write output to <file> instead of to stdout.

## COMMANDS

Non-option arguments are `commands` in a limited stack language. This language
is not turing complete as it provides no branching or jump facilities. It is
similar to a calculator in that commands operate on data in, and push their
results onto stack data structures provided by the `jt` runtime. There are
three stacks on which commands operate:

* The `data stack` contains JSON objects from the input stream. Commands
  operate on the top of this stack to traverse the JSON tree and print values.

* The `gosub stack` contains pointers into the data stack. Commands push data
  stack pointers onto this stack to save the state of the data stack and pop
  them off to restore the data stack to a saved state.

* The `index stack` contains the indexes of nested arrays as `jt` iterates over
  them. Commands can print the value at the top of this stack.

Commands are evaluated from left to right. When all commands have been applied
the data stack is restored to its initial state, containing only the root JSON
object, and a row of output is printed. This process is repeated until all rows
have been printed.

Nested arrays in the JSON input are treated as implicit joins: a row of output
is produced for each item in the array. The array indexes are stored internally
between iterations and are read-only &mdash; no control over this is exposed
via the command language.

The following commands are available:

  * `[`:
    Save the state of the data stack: the current data stack pointer is pushed
    onto the gosub stack.

  * `]`:
    Restore the data stack to a saved state: pop the gosub stack and restore
    the data stack pointer to that state.

  * `%`:
    Print the value at the top of the data stack. If the item at the top of the
    data stack is not a string or primitive type a blank field is printed.

  * `^`:
    Print the array index at the top of the index stack. It is an error if the
    index stack is empty.

  * `@`:
    Print the keys of the object at the top of the data stack. It is an error
    if the item at the top of the data stack is not an object.

  * <KEY>:
    Drill down: get the value of the <KEY> property of the object at the top
    of the data stack and push that value onto the data stack.

    If the item at the top of the data stack is not an object or if the object
    has no <KEY> property a blank field is printed, unless the `-j` option was
    specified in which case the entire row is removed from the output.

    If the <KEY> property of the object is an array subsequent commands will
    operate on one of the items in the array, chosen automatically by `jt`.
    The array index will be available to subsequent commands via the index
    stack.

## JSON UNESCAPING AND CSV OUTPUT

Strings in JSON data must not contain control characters (e.g., `tab`,
`newline`, etc.) These characters _must_ be escaped with a backslash.
Additionally, any character _may_ be escaped with a backslash. The JSON
specification also allows escaping of unicode characters with `\u` escape,
for example the copyright symbol ¬© can be encoded as `\u00A9`, and the G-clef
character ùÑû as `\uD834\uDD1E`.

Numbers may be expressed in a number of ways in JSON data, and there is a
single `Number` type that encompasses both integer and floating point. Both
decimal and exponential notation are valid in JSON.

### Strings

**Jt** does not unescape string values by default, in case they contain
tab or newline characters that would break the tabular output format. If
unescaped values are needed this can be achieved by invoking **jt** with the
`-u` option in post processing. For example:

    $ jt -u 'i love music \u266A'
    i love music ‚ô™

### Numbers

**Jt** does not process numbers in any way &mdash; they are printed in the
output verbatim, as they appear in the JSON input. If special processing is
required the `printf` program in coreutils is your friend:

    $ printf %.0f 2.99792458e9
    2997924580

### CSV Output

The CSV format uses quoted values, which avoids the problems associated with
values that contain tab and newline characters. The `-c` option puts **jt**
into CSV output mode. In this mode JSON strings are unescaped by default. The
`csvtool` program and `csvkit` suite of tools facilitate processing of CSV
data in the shell.

## EXAMPLES

We will use the following JSON input for the examples:

    $ JSON='{"foo":"a","bar":{"x":"b"},"baz":[{"y":"c"},{"y":"d","z":"e"}]}'

### Explore

Explore JSON data, print an object's keys:

    $ echo "$JSON" | jt @
    foo
    bar
    baz

Print a nested object's keys:

    $ echo "$JSON" | jt bar @
    x

Print the keys of the first object in a nested array:

    $ echo "$JSON" | jt baz @
    y

Print the indexes in a nested array:

    $ echo "$JSON" | jt baz ^
    0
    1

### Extract

Extract values from JSON data:

    $ echo "$JSON" | jt foo %
    a

Extract nested JSON data:

    $ echo "$JSON" | jt bar x %
    b

### Save / Restore

Extract multiple values by saving and restoring the data stack:

    $ echo "$JSON" | jt [ foo % ] bar x %
    a       b

### Arrays

Iterate over nested arrays, producing one row per iteration:

    $ echo "$JSON" | jt [ foo % ] [ bar x % ] baz y %
    a       b       c
    a       b       d

Include the array index as a column in the result:

    $ echo "$JSON" | jt [ foo % ] [ bar x % ] baz y % ^
    a       b       c       0
    a       b       d       1

### Joins

Notice the empty column &mdash; some objects don't have the <z> key:

    $ echo "$JSON" | jt [ foo % ] baz [ y % ] z %
    a       c
    a       d       e

Inner join mode will remove rows from the output when any key in the traversal
path doesn't exist:

    $ echo "$JSON" | jt -j [ foo % ] baz [ y % ] z %
    a       d       e

## COPYRIGHT

Copyright ¬© 2016 Micha Niskin `<micha.niskin@gmail.com>`.
Distributed under the Eclipse Public License, version 1.0.

## SEE ALSO

jshon(1), jq(1), comm(1), diff(1), sort(1), join(1), uniq(1), bash(1)
